# styles.py

import flet as ft

# --- Paleta de Colores Vistosos (Añade más si quieres) ---
# Hemos definido algunos colores personalizados para mayor flexibilidad.
PRIMARY_COLOR = ft.Colors.BLUE_ACCENT_700
PRIMARY_COLOR_LIGHT = ft.Colors.BLUE_ACCENT_100
ACCENT_COLOR = ft.Colors.CYAN_700
BACKGROUND_COLOR = ft.Colors.WHITE
SURFACE_COLOR = ft.Colors.GREY_50
TEXT_COLOR_DARK = ft.Colors.BLUE_GREY_900
TEXT_COLOR_LIGHT = ft.Colors.BLUE_GREY_400
ERROR_COLOR = ft.Colors.RED_ACCENT_700


# --- Estilos de Texto ---
def heading_large_style():
    return ft.TextStyle(
        size=28,
        weight=ft.FontWeight.BOLD,
        color=TEXT_COLOR_DARK,
    )

def heading_medium_style():
    return ft.TextStyle(
        size=22,
        weight=ft.FontWeight.SEMIBOLD,
        color=TEXT_COLOR_DARK,
    )

def body_text_style():
    return ft.TextStyle(
        size=16,
        color=TEXT_COLOR_DARK,
    )

def caption_text_style():
    return ft.TextStyle(
        size=12,
        color=TEXT_COLOR_LIGHT,
    )

# --- Estilos de Botones ---
def primary_button_style():
    return ft.ButtonStyle(
        color={
            ft.ControlState.HOVERED: ft.Colors.WHITE,
            ft.ControlState.FOCUSED: ft.Colors.WHITE,
            ft.ControlState.DEFAULT: ft.Colors.WHITE,
        },
        bgcolor={
            ft.ControlState.HOVERED: ft.Colors.BLUE_ACCENT_400, # Ligeramente más claro
            ft.ControlState.FOCUSED: PRIMARY_COLOR,
            ft.ControlState.DEFAULT: PRIMARY_COLOR,
        },
        padding=ft.padding.symmetric(horizontal=25, vertical=15),
        shape=ft.RoundedRectangleBorder(radius=10), # Bordes más redondeados
        animation_duration=300, # Animación suave
    )

def outline_button_style():
    return ft.ButtonStyle(
        color=PRIMARY_COLOR,
        bgcolor=ft.Colors.TRANSPARENT,
        side=ft.BorderSide(2, PRIMARY_COLOR), # Borde de 2px
        padding=ft.padding.symmetric(horizontal=25, vertical=15),
        shape=ft.RoundedRectangleBorder(radius=10),
        animation_duration=300,
    )

def text_button_style():
    return ft.ButtonStyle(
        color=ACCENT_COLOR,
        bgcolor=ft.Colors.TRANSPARENT,
        overlay_color=ft.Colors.CYAN_100, # Un ligero resaltado al hacer hover
        padding=ft.padding.symmetric(horizontal=15, vertical=10),
        shape=ft.RoundedRectangleBorder(radius=8),
    )

# --- Estilos de Contenedores y Tarjetas (Cards) ---
def card_container_style():
    return {
        "padding": 20,
        "border_radius": 15, # Bordes más redondeados
        "bgcolor": SURFACE_COLOR,
        "shadow": ft.BoxShadow( # Sombra sutil y extendida
            spread_radius=2,
            blur_radius=15,
            color=ft.Colors.BLACK.with_opacity(0.08), # Sombra grisácea semitransparente
            offset=ft.Offset(0, 5), # Ligeramente desplazada hacia abajo
            blur_style=ft.ShadowBlurStyle.NORMAL,
        ),
    }

def image_card_container_style():
    # Estilo para tarjetas que contengan imágenes, quizás con menos padding
    return {
        "padding": 10,
        "border_radius": 15,
        "bgcolor": SURFACE_COLOR,
        "clip_behavior": ft.ClipBehavior.ANTI_ALIAS, # Muy importante para bordes de imagen
        "shadow": ft.BoxShadow(
            spread_radius=1,
            blur_radius=10,
            color=ft.Colors.BLACK.with_opacity(0.05),
            offset=ft.Offset(0, 3),
            blur_style=ft.ShadowBlurStyle.NORMAL,
        ),
    }

# --- Estilos de Campos de Texto (Input) ---
def text_input_style():
    return {
        "border_radius": 10,
        "border_color": ft.Colors.BLUE_GREY_200,
        "focused_border_color": PRIMARY_COLOR,
        "filled": True,
        "fill_color": ft.Colors.GREY_100,
        "content_padding": 12,
        "cursor_color": PRIMARY_COLOR,
        "label_style": body_text_style(), # Usamos nuestro estilo de texto para el label
    }

# --- Tema General de la Aplicación ---
def app_theme():
    return ft.Theme(
        # Usamos nuestro color primario como semilla para el tema de Material Design 3
        color_scheme_seed=PRIMARY_COLOR,
        use_material3=True,
        # Puedes definir tipografías personalizadas aquí si las cargas
        # text_theme={
        #     "headlineLarge": heading_large_style(),
        #     "bodyMedium": body_text_style(),
        # }
        # También puedes sobreescribir estilos de componentes predeterminados
        # por ejemplo, para que todos los ElevatedButtons usen primary_button_style por defecto
        # elevated_button_theme=ft.ThemeExtension(
        #     attributes={
        #         "style": primary_button_style(),
        #     }
        # )
    )

# --- Estilos de la Página (Opcional, para el fondo) ---
def page_background_style():
    return {
        "bgcolor": BACKGROUND_COLOR,
    }